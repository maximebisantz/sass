/*
 *  MIXINS Declaration
 */

@mixin border-box{
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

@mixin box-shadow($shadows...){
  -webkit-box-shadow: $shadows;
  -moz-box-shadow: $shadows;
  box-shadow: $shadows;
}

@mixin hyphens{
    hyphens: auto; 
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    // Chrome hack
    &:not(*:root){
      word-break: break-all;
    }
}

@mixin pagination($direction: up){
  $element-size: 16px;
  
  $height : 192px;
  $width: $element-size;
  
  $pagination-height: 68px;
  $pagination-width: $element-size;
  
  $control-spacing: ($height - $pagination-height) / 2 - 16;
  
  @if $direction == down {
    $width: 370px;
    $pagination-width: 68px;
    $pagination-height: $element-size;
    $height: $element-size;
    $control-spacing: ($width - $pagination-width) / 2 - 16;
  }

  height: $height;
  width: $width;
  
  @if $direction == up{
    margin-top: -($height/2);
  }


  @if $direction == down{
    .page, a, .pagination{
      float: left;
    }
  }
  
  .page, a{
    width: $element-size;
    height: $element-size;
  }
  
  .pagination{
    height: $pagination-height;
    width: $pagination-width;
  }
  .page{
    @if $direction == up{
      margin-bottom: ($pagination-height - (3 * $element-size)) / 2;
    }
    @if $direction == down{
      margin-right: ($pagination-width - (3 * $element-size)) / 2;
      &:last-child{
        margin-right: 0;
      }
    }
  }
  
  
  a{
    background:{
      position: 50% 50%;
      repeat: no-repeat;
    }
    &.previous{
      margin-bottom: $control-spacing;
      background-position: 50% 0;
      @if $direction == down{
        margin-bottom: 0;
        margin-right: $control-spacing;
      }
    }
    &.next{
      margin-top: $control-spacing;
      background-position: 0 50%;
      @if $direction == down{
        margin-top: 0;
        margin-left: $control-spacing;
      }
    }
  }
}

@mixin clearfix{
  *zoom: 1;
  &:before,
  &:after{
    content: " ";
    display: table;
  }
  &:after{
    clear: both;
  }
}

@function _block-size($nbOfElements){
  
  $block: $document-width / 12;
  $padding: $spacing * 2;
  $block-size: ($block * $nbOfElements) - $padding;
  
  @return $block-size;
}

@mixin box-width($nbOfElm){
  // (helper) BOX WIDTH
  width: _block-size($nbOfElm) + px;
}

@mixin box-height($nbOfElm){
  height: _block-size($nbOfElm) + px;
}

@mixin box-square($nbOfElm){
  @include box-width($nbOfElm);
  @include box-height($nbOfElm);
}

@mixin flex-container{
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($size:1){
  -webkit-box-flex: $size;
  -moz-box-flex: $size;
  -webkit-flex: $size;
  -ms-flex: $size;
  flex: $size;
}

@mixin flex-align-self($align:center){
  align-self: $align;
}

@mixin border-radius($radius...){
  border-radius: $radius;
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
}

@function pow ($base, $exp) {
    @if $exp == floor($exp) {
        $r: 1;
        $s: 0;
        @if $exp < 0 {
            $exp: $exp * -1;
            $s: 1;
        }
        @while $exp > 0 {
            @if $exp % 2 == 1 {
                $r: $r * $base;
            }
            $exp: floor($exp * 0.5);
            $base: $base * $base;
        }
        @return if($s != 0, 1 / $r, $r);
    } @else {
        @return exp(log($base) * $exp);
    }
}

@function sqrt ($x) {
    @if $x < 0 {
        @warn "Argument for `sqrt()` must be a positive number.";
        @return null;
    }
    $ret: 1;
    @for $i from 1 through 24 {
        $ret: $ret - (pow($ret, 2) - $x) / (2 * $ret);
    }
    @return $ret;
}

